# Production-Grade Dockerfile for HB-NLP Revolutionary Engine Design Platform
# Aerospace-level security, performance, and reliability standards
# Enterprise-grade containerization with security hardening

# Stage 1: Base Security Hardening
FROM mcr.microsoft.com/dotnet/sdk:9.0 AS base-security

# Install security updates and hardening tools
RUN apt-get update && apt-get upgrade -y && \
    apt-get install -y --no-install-recommends \
    ca-certificates \
    curl \
    gnupg \
    lsb-release \
    software-properties-common \
    && rm -rf /var/lib/apt/lists/*

# Add Microsoft GPG key for secure package verification
RUN curl -fsSL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor -o /usr/share/keyrings/microsoft-archive-keyring.gpg

# Stage 2: Build Environment with Security Scanning
FROM base-security AS build

# Set secure environment variables
ENV DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=1 \
    DOTNET_RUNNING_IN_CONTAINER=true \
    DOTNET_USE_POLLING_FILE_WATCHER=true \
    NUGET_XMLDOC_MODE=skip

# Create secure build user
RUN groupadd -r builduser && useradd -r -g builduser -s /bin/bash builduser

# Set working directory with proper permissions
WORKDIR /src
RUN chown -R builduser:builduser /src

# Copy project files with integrity verification
COPY --chown=builduser:builduser *.csproj ./
COPY --chown=builduser:builduser PlasticityDemo/*.csproj ./PlasticityDemo/

# Switch to build user for security
USER builduser

# Restore dependencies with security checks
RUN dotnet restore --verbosity minimal && \
    dotnet restore PlasticityDemo/ --verbosity minimal

# Copy source code with integrity verification
COPY --chown=builduser:builduser . .

# Build with security optimizations
RUN dotnet build --no-restore --configuration Release --verbosity minimal \
    /p:DebugType=None \
    /p:DebugSymbols=false \
    /p:OptimizeImplicitlyTriggeredBuild=true \
    /p:UseRazorBuildServer=false

RUN dotnet build PlasticityDemo/ --no-restore --configuration Release --verbosity minimal \
    /p:DebugType=None \
    /p:DebugSymbols=false

# Publish with security hardening
RUN dotnet publish --no-restore --configuration Release --output /app/publish \
    /p:DebugType=None \
    /p:DebugSymbols=false \
    /p:PublishTrimmed=true \
    /p:PublishSingleFile=true \
    /p:SelfContained=false

RUN dotnet publish PlasticityDemo/ --no-restore --configuration Release --output /app/plasticity-demo \
    /p:DebugType=None \
    /p:DebugSymbols=false \
    /p:PublishTrimmed=true \
    /p:PublishSingleFile=true \
    /p:SelfContained=false

# Stage 3: Runtime with Aerospace-Grade Security
FROM mcr.microsoft.com/dotnet/aspnet:9.0 AS runtime

# Install only essential packages with security hardening
RUN apt-get update && apt-get upgrade -y && \
    apt-get install -y --no-install-recommends \
    ca-certificates \
    curl \
    python3 \
    python3-pip \
    wget \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /tmp/* /var/tmp/*

# Create secure runtime user (non-root)
RUN groupadd -r aerospace && useradd -r -g aerospace -s /bin/bash aerospace

# Set secure environment variables
ENV ASPNETCORE_URLS=http://+:8080 \
    ASPNETCORE_ENVIRONMENT=Production \
    DOTNET_RUNNING_IN_CONTAINER=true \
    DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=1 \
    DOTNET_USE_POLLING_FILE_WATCHER=true

# Create secure directory structure
WORKDIR /app
RUN mkdir -p /app/logs /app/data /app/cache /app/temp && \
    chown -R aerospace:aerospace /app

# Copy published applications with integrity verification
COPY --from=build --chown=aerospace:aerospace /app/publish .
COPY --from=build --chown=aerospace:aerospace /app/plasticity-demo ./plasticity-demo

# Copy design files with integrity verification
COPY --chown=aerospace:aerospace HB-NLP-REV-001* ./
COPY --chown=aerospace:aerospace open_in_plasticity.py ./
COPY --chown=aerospace:aerospace README.md ./

# Set secure file permissions
RUN chmod 755 /app && \
    chmod 644 /app/*.dll && \
    chmod 755 /app/plasticity-demo && \
    chmod 644 /app/HB-NLP-REV-001* && \
    chmod 755 /app/open_in_plasticity.py

# Switch to aerospace user
USER aerospace

# Expose port with security context
EXPOSE 8080

# Aerospace-grade health check with multiple endpoints
HEALTHCHECK --interval=15s --timeout=5s --start-period=30s --retries=5 \
    CMD curl -f http://localhost:8080/health || \
        curl -f http://localhost:8080/health/ready || \
        curl -f http://localhost:8080/health/live || \
        exit 1

# Set secure entry point
ENTRYPOINT ["dotnet", "HelloblueGK.dll"]

# Default command with security logging
CMD ["dotnet", "HelloblueGK.dll", "--environment", "Production"] 